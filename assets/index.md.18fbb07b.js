import{_ as n,c as s,o as a,a as t}from"./app.5c24c556.js";const h='{"title":"Quickstart","description":"","frontmatter":{"sidebarDepth":2},"headers":[{"level":2,"title":"Installation","slug":"installation"},{"level":2,"title":"Basic Usage","slug":"basic-usage"},{"level":2,"title":"What is django-simplefilters","slug":"what-is-django-simplefilters"},{"level":2,"title":"Motivation","slug":"motivation"}],"relativePath":"index.md"}',e={},o=t(`<h1 id="quickstart" tabindex="-1">Quickstart <a class="header-anchor" href="#quickstart" aria-hidden="true">#</a></h1><p>This is a drop-in replacement for built-in Django Rest Framework filters package. It provides an easy way to retrieve params from the URL and use them to narrow results of the queryset.</p><h2 id="installation" tabindex="-1">Installation <a class="header-anchor" href="#installation" aria-hidden="true">#</a></h2><div class="language-shell"><pre><code>$ pip <span class="token function">install</span> django-simplefilters
</code></pre></div><h2 id="basic-usage" tabindex="-1">Basic Usage <a class="header-anchor" href="#basic-usage" aria-hidden="true">#</a></h2><p>First, let&#39;s define our filterset.</p><div class="language-python"><pre><code><span class="token keyword">import</span> simplefilters <span class="token keyword">as</span> filters


<span class="token keyword">class</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>filters<span class="token punctuation">.</span>FilterSet<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>CharFilter</span><span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">filter_status</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status__in<span class="token operator">=</span>values<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>DateTimeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">filter_min_modify_date</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>modified_at__gte<span class="token operator">=</span>value<span class="token punctuation">)</span>
</code></pre></div><p>Now let&#39;s connect our filterset with some viewset.</p><div class="language-python"><pre><code><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> filtersets
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> serializers
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ModelViewSet
<span class="token keyword">import</span> simplefilters <span class="token keyword">as</span> filters


<span class="token keyword">class</span> <span class="token class-name">TodoViewSet</span><span class="token punctuation">(</span>ModelViewSet<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Todo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    serializer_class <span class="token operator">=</span> serializers<span class="token punctuation">.</span>Todo
    filter_backends <span class="token operator">=</span> <span class="token punctuation">[</span>filters<span class="token punctuation">.</span>DjangoFilterBackend<span class="token punctuation">]</span>
    filter_class <span class="token operator">=</span> filtersets<span class="token punctuation">.</span>Todo

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> models<span class="token punctuation">.</span>Todo


todo_list <span class="token operator">=</span> TodoViewSet<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;list&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>You can also use filtersets with</p><ul><li><a href="/django-simplefilters/guide/drf.html#view">api views</a></li><li><a href="/django-simplefilters/guide/django.html#django-view">plain Django views</a></li><li>or even <a href="/django-simplefilters/guide/django.html#call-filterset-directly">outside of request-response cycle</a></li></ul></div><p>Read more about <a href="/django-simplefilters/api/filters.html#basefilter">built-in filters</a>.</p><h2 id="what-is-django-simplefilters" tabindex="-1">What is django-simplefilters <a class="header-anchor" href="#what-is-django-simplefilters" aria-hidden="true">#</a></h2><p>The main difference with other solutions, i.e. <a href="https://pypi.python.org/pypi/django-filter" target="_blank" rel="noopener noreferrer">django-filter</a>, is that we do not try to handle each case and actual filtering is left for the user to implement. This might sound counterintuitive for a filtering library but we believe that in many cases it&#39;s much easier to write something like</p><div class="language-python"><pre><code><span class="token keyword">class</span> <span class="token class-name">EntryFilterSet</span><span class="token punctuation">(</span>filters<span class="token punctuation">.</span>FilterSet<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>CharFilter</span><span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">filter_status</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> queryset<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status__in<span class="token operator">=</span>values<span class="token punctuation">)</span>
</code></pre></div><p>than try to find this special case (multiple values) in your filtering library documentation.</p><h2 id="motivation" tabindex="-1">Motivation <a class="header-anchor" href="#motivation" aria-hidden="true">#</a></h2><p>We&#39;ve been using <code>django-filter</code> for a long time and it&#39;s really great library. However, due to how many possibilites it offer, we&#39;ve found out that sometimes it&#39;s really hard to find proper portion of the documentation. Sometimes we really hoped that we could simply define a method and write queryset filtering by hand (hint: <a href="https://django-filter.readthedocs.io/en/main/ref/filters.html#method" target="_blank" rel="noopener noreferrer">it is possible</a>).</p><p>The other side of the story is <strong>maintability</strong>. Even if someone already spend some time fiddling with the filterset and reading documentation - it was still sometimes difficult to get back to this code after some time. Here is an example from <a href="./.html">django-filter docs</a>:</p><div class="language-python"><pre><code><span class="token keyword">class</span> <span class="token class-name">ProductFilter</span><span class="token punctuation">(</span>django_filters<span class="token punctuation">.</span>FilterSet<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        model <span class="token operator">=</span> Product
        fields <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;exact&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string">&#39;release_date&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;isnull&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
        filter_overrides <span class="token operator">=</span> <span class="token punctuation">{</span>
            models<span class="token punctuation">.</span>CharField<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">&#39;filter_class&#39;</span><span class="token punctuation">:</span> django_filters<span class="token punctuation">.</span>CharFilter<span class="token punctuation">,</span>
                <span class="token string">&#39;extra&#39;</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> f<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&#39;lookup_expr&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;icontains&#39;</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                <span class="token string">&#39;filter_class&#39;</span><span class="token punctuation">:</span> django_filters<span class="token punctuation">.</span>BooleanFilter<span class="token punctuation">,</span>
                <span class="token string">&#39;extra&#39;</span><span class="token punctuation">:</span> <span class="token keyword">lambda</span> f<span class="token punctuation">:</span> <span class="token punctuation">{</span>
                    <span class="token string">&#39;widget&#39;</span><span class="token punctuation">:</span> forms<span class="token punctuation">.</span>CheckboxInput<span class="token punctuation">,</span>
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
</code></pre></div><p>After reading this code would you be able to tell what filters are supported and how exactly filtering would be applied to the queryset? \u{1F914}</p><p><code>django-simplefilters</code> is less flexible, more opinionated and definitely more explicit.</p>`,21),p=[o];function i(l,c,r,u,k,d){return a(),s("div",null,p)}var m=n(e,[["render",i]]);export{h as __pageData,m as default};
