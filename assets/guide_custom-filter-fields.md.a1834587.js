import{_ as s,c as n,o as a,a as e}from"./app.5c24c556.js";const _='{"title":"Custom filters","description":"","frontmatter":{},"headers":[{"level":2,"title":"Example","slug":"example"}],"relativePath":"guide/custom-filter-fields.md"}',t={},o=e(`<h1 id="custom-filters" tabindex="-1">Custom filters <a class="header-anchor" href="#custom-filters" aria-hidden="true">#</a></h1><p>It&#39;s pretty easy to write your own filter. <code>BaseFilter</code> yields raw string value directly from query string. You&#39;d need to subclass that filter and overwrite <code>get_single_value(self, value)</code> method.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h2><p>Let&#39;s say we want to write a filter that would only recognize <code>yes</code> or <code>no</code> values and convert them into <code>True</code> or <code>False</code>. However, if user provides wrong value we would return <code>HTTP 400</code> response.</p><div class="language-python"><pre><code><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ValidationError
<span class="token keyword">import</span> simplefilters <span class="token keyword">as</span> filters


<span class="token keyword">class</span> <span class="token class-name">FlagFilter</span><span class="token punctuation">(</span>filters<span class="token punctuation">.</span>BaseFilter<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">get_single_value</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token string">&#39;yes&#39;</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">elif</span> value <span class="token operator">==</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            msg <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f&#39;unrecognized querystring value: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token conversion-option punctuation">!r</span><span class="token punctuation">}</span></span><span class="token string">&#39;</span></span>
            <span class="token keyword">raise</span> ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;detail&#39;</span><span class="token punctuation">:</span> msg<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,5),p=[o];function l(r,c,i,u,d,k){return a(),n("div",null,p)}var m=s(t,[["render",l]]);export{_ as __pageData,m as default};
