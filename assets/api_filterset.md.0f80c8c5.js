import{_ as e,c as a,o as t,a as s}from"./app.5c24c556.js";const _='{"title":"FilterSet","description":"","frontmatter":{"sidebarDepth":3},"headers":[{"level":2,"title":"perform_filtering","slug":"perform-filtering"},{"level":2,"title":"performfilteringforqueryparams","slug":"perform-filtering-for-query-params"},{"level":2,"title":"iterfiltersand_values","slug":"iter-filters-and-values"},{"level":2,"title":"getfiltermethods","slug":"get-filter-methods"}],"relativePath":"api/filterset.md"}',r={},n=s(`<h1 id="filterset" tabindex="-1">FilterSet <a class="header-anchor" href="#filterset" aria-hidden="true">#</a></h1><h2 id="perform-filtering" tabindex="-1">perform_filtering <a class="header-anchor" href="#perform-filtering" aria-hidden="true">#</a></h2><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">perform_filtering</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> queryset<span class="token punctuation">,</span> view<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre></div><p>Main entry point of the filterset. This method is called by DRF filter backends executor.</p><p><strong>Params</strong></p><ul><li><code>request</code>: instance of <code>rest_framework.request.Request</code></li><li><code>queryset</code>: Django&#39;s queryset object</li><li><code>view</code>: (optional) view/viewset object. It&#39;s actually not used by <code>django-simplefilters</code> but is part of the protocol and is passed by DRF.</li></ul><h2 id="perform-filtering-for-query-params" tabindex="-1">perform_filtering_for_query_params <a class="header-anchor" href="#perform-filtering-for-query-params" aria-hidden="true">#</a></h2><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">perform_filtering_for_query_params</span><span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> query_params<span class="token punctuation">)</span>
</code></pre></div><p>Actual filtering.</p><p><strong>Params</strong></p><ul><li><code>queryset</code>: Django&#39;s queryset object</li><li><code>query_params</code>: <code>QueryDict</code> / <code>dict</code> with url query params</li></ul><h2 id="iter-filters-and-values" tabindex="-1">iter_filters_and_values <a class="header-anchor" href="#iter-filters-and-values" aria-hidden="true">#</a></h2><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">iter_filters_and_values</span><span class="token punctuation">(</span>query_params<span class="token punctuation">)</span>
</code></pre></div><p>Generator that yields tuples of <code>(filter, value)</code> matched with given <code>query_params</code>.</p><p><strong>Params</strong></p><ul><li><code>query_params</code>: <code>QueryDict</code> / <code>dict</code> with url query params</li></ul><h2 id="get-filter-methods" tabindex="-1">get_filter_methods <a class="header-anchor" href="#get-filter-methods" aria-hidden="true">#</a></h2><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">get_filter_methods</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Returns all filter methods defined at the filterset.</p>`,19),o=[n];function i(l,p,c,d,u,f){return t(),a("div",null,o)}var m=e(r,[["render",i]]);export{_ as __pageData,m as default};
