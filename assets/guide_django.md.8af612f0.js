import{_ as n,c as s,o as a,a as t}from"./app.5c24c556.js";const y='{"title":"Plain Django","description":"","frontmatter":{},"headers":[{"level":2,"title":"Filterset","slug":"filterset"},{"level":2,"title":"Django view","slug":"django-view"},{"level":2,"title":"Call filterset directly","slug":"call-filterset-directly"}],"relativePath":"guide/django.md"}',p={},o=t(`<h1 id="plain-django" tabindex="-1">Plain Django <a class="header-anchor" href="#plain-django" aria-hidden="true">#</a></h1><p>While <code>django-simplefilters</code> were built with Django Rest Framework in mind it&#39;s really easy to use it with plain Django views too.</p><h2 id="filterset" tabindex="-1">Filterset <a class="header-anchor" href="#filterset" aria-hidden="true">#</a></h2><p>Let&#39;s define our filtering as usual.</p><div class="language-python"><pre><code><span class="token keyword">import</span> simplefilters <span class="token keyword">as</span> filters


<span class="token keyword">class</span> <span class="token class-name">Todo</span><span class="token punctuation">(</span>filters<span class="token punctuation">.</span>FilterSet<span class="token punctuation">)</span><span class="token punctuation">:</span>

    <span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>CharFilter</span><span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">filter_status</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status__in<span class="token operator">=</span>values<span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>DateTimeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">filter_modified_after</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>modified_at__gte<span class="token operator">=</span>value<span class="token punctuation">)</span>
</code></pre></div><h2 id="django-view" tabindex="-1">Django view <a class="header-anchor" href="#django-view" aria-hidden="true">#</a></h2><div class="language-python"><pre><code><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> filtersets
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models
<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse
<span class="token keyword">import</span> simplefilters <span class="token keyword">as</span> filters


<span class="token keyword">def</span> <span class="token function">todo_list_view</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Todo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fs <span class="token operator">=</span> filtersets<span class="token punctuation">.</span>Todo<span class="token punctuation">(</span><span class="token punctuation">)</span>
    qs <span class="token operator">=</span> fs<span class="token punctuation">.</span>perform_filtering_for_query_params<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">)</span>
    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token string">&quot;id&quot;</span><span class="token punctuation">:</span> todo<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>
        <span class="token string">&quot;title&quot;</span><span class="token punctuation">:</span> todo<span class="token punctuation">.</span>title<span class="token punctuation">,</span>
    <span class="token punctuation">}</span> <span class="token keyword">for</span> todo <span class="token keyword">in</span> qs<span class="token punctuation">]</span><span class="token punctuation">,</span> safe<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="call-filterset-directly" tabindex="-1">Call filterset directly <a class="header-anchor" href="#call-filterset-directly" aria-hidden="true">#</a></h2><p>It is possible to use <code>simplefilters</code> out of request-response cycle.</p><div class="language-python"><pre><code><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> filtersets
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> models
<span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> serializers
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>decorators <span class="token keyword">import</span> api_view
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response
<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> ModelViewSet
<span class="token keyword">import</span> simplefilters <span class="token keyword">as</span> filters


<span class="token keyword">def</span> <span class="token function">get_todos</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Todo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fs <span class="token operator">=</span> filtersets<span class="token punctuation">.</span>Todo<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> fs<span class="token punctuation">.</span>perform_filtering_for_query_params<span class="token punctuation">(</span>queryset<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;archived&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre></div>`,10),e=[o];function c(l,i,u,r,k,d){return a(),s("div",null,e)}var w=n(p,[["render",c]]);export{y as __pageData,w as default};
