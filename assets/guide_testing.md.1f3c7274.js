import{_ as n,c as s,o as a,a as t}from"./app.5c24c556.js";const _='{"title":"Testing","description":"","frontmatter":{},"headers":[{"level":2,"title":"Parametrized tests","slug":"parametrized-tests"}],"relativePath":"guide/testing.md"}',p={},o=t(`<h1 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h1><p>You should test filtering in the same way you test other parts of the code. This process is different from project to project. Here we provide some hints how tests can be implemented for filtering.</p><h2 id="parametrized-tests" tabindex="-1">Parametrized tests <a class="header-anchor" href="#parametrized-tests" aria-hidden="true">#</a></h2><p>Usually when writing tests for filtering we want to assure different behaviours:</p><ul><li>given query param is respected and handled properly</li><li>changing value of that param should yield different results</li><li>wrong values are ignored</li><li>lack of param should yield whole data set</li></ul><p>We recommend to use something like pytest&#39;s <code>parametrize</code> functionality.</p><div class="language-python"><pre><code><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>mark<span class="token punctuation">.</span>parametrize</span><span class="token punctuation">(</span><span class="token string">&#39;url, expected_todos&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token punctuation">(</span><span class="token string">&#39;?status=open&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;todo1&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;?status=done&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;todo2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;todo3&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;?status=done&amp;status=archived&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;todo2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;todo3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;todo4&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;?status=wrong&#39;</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">(</span><span class="token string">&#39;?foo=bar&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">&#39;todo1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;todo2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;todo3&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;todo4&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">test_list__filter_by_status</span><span class="token punctuation">(</span>arf<span class="token punctuation">,</span> url<span class="token punctuation">,</span> expected_todos<span class="token punctuation">)</span><span class="token punctuation">:</span>
    TodoFactory<span class="token punctuation">(</span><span class="token string">&#39;todo1&#39;</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token string">&#39;open&#39;</span><span class="token punctuation">)</span>
    TodoFactory<span class="token punctuation">(</span><span class="token string">&#39;todo2&#39;</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
    TodoFactory<span class="token punctuation">(</span><span class="token string">&#39;todo3&#39;</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token string">&#39;done&#39;</span><span class="token punctuation">)</span>
    TodoFactory<span class="token punctuation">(</span><span class="token string">&#39;todo4&#39;</span><span class="token punctuation">,</span> status<span class="token operator">=</span><span class="token string">&#39;archived&#39;</span><span class="token punctuation">)</span>

    request <span class="token operator">=</span> arf<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    response <span class="token operator">=</span> views<span class="token punctuation">.</span>todo_list<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token keyword">assert</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>data
    <span class="token keyword">assert</span> <span class="token punctuation">{</span>todo<span class="token punctuation">[</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">]</span> <span class="token keyword">for</span> todo <span class="token keyword">in</span> response<span class="token punctuation">.</span>data<span class="token punctuation">}</span> <span class="token operator">==</span> expected_todos
</code></pre></div>`,7),e=[o];function c(u,i,l,r,k,d){return a(),s("div",null,e)}var h=n(p,[["render",c]]);export{_ as __pageData,h as default};
