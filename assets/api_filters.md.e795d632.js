import{_ as n,c as a,o as s,a as t}from"./app.5c24c556.js";const h='{"title":"Built-in Filters","description":"","frontmatter":{"sidebarDepth":3},"headers":[{"level":2,"title":"BaseFilter","slug":"basefilter"},{"level":2,"title":"CharField","slug":"charfield"},{"level":2,"title":"IntegerFilter","slug":"integerfilter"},{"level":2,"title":"FlagFilter","slug":"flagfilter"},{"level":2,"title":"DateTimeFilter","slug":"datetimefilter"}],"relativePath":"api/filters.md"}',e={},p=t(`<h1 id="built-in-filters" tabindex="-1">Built-in Filters <a class="header-anchor" href="#built-in-filters" aria-hidden="true">#</a></h1><h2 id="basefilter" tabindex="-1">BaseFilter <a class="header-anchor" href="#basefilter" aria-hidden="true">#</a></h2><div class="language-python"><pre><code><span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>param<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre></div><p><strong>Params</strong></p><ul><li><p><code>param</code>: (optional) Name of the query param. If not explicitly provided would be taken from the function name. I.e. for <code>def filter_modified_at_min</code> name of the query param would be <code>modified_at_min</code>, for <code>def filter_status</code> it would be <code>status</code>.</p><p>Example:</p><div class="language-python"><pre><code><span class="token comment"># would match &#39;?s=new&#39; and not &#39;?status=new&#39;</span>
<span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>CharField</span><span class="token punctuation">(</span><span class="token string">&quot;s&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">filter_status</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status__in<span class="token operator">=</span>values<span class="token punctuation">)</span>
</code></pre></div></li><li><p><code>many</code>: If set to <code>True</code> array of values would be passed to filter function instead of a single value. Multiple values for single param is supported, i.e. <code>?status=new&amp;status=in_progress</code>. Then <code>values</code> would be <code>[&#39;new&#39;, &#39;in_progress&#39;]</code>:</p><div class="language-python"><pre><code><span class="token comment"># query string: &#39;?status=new&amp;status=in_progress&#39;</span>
<span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>CharField</span><span class="token punctuation">(</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">filter_status</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># values: [&#39;new&#39;, &#39;in_progress&#39;]</span>
    <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status__in<span class="token operator">=</span>values<span class="token punctuation">)</span>
</code></pre></div></li></ul><h2 id="charfield" tabindex="-1">CharField <a class="header-anchor" href="#charfield" aria-hidden="true">#</a></h2><p><strong>Example</strong></p><div class="language-python"><pre><code><span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>CharFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">filter_status</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span>value<span class="token punctuation">)</span>
</code></pre></div><h2 id="integerfilter" tabindex="-1">IntegerFilter <a class="header-anchor" href="#integerfilter" aria-hidden="true">#</a></h2><p><strong>Example</strong></p><div class="language-python"><pre><code><span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>CharFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">filter_status</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>status<span class="token operator">=</span>value<span class="token punctuation">)</span>
</code></pre></div><h2 id="flagfilter" tabindex="-1">FlagFilter <a class="header-anchor" href="#flagfilter" aria-hidden="true">#</a></h2><ul><li>Truthy values: <code>[&#39;y&#39;, &#39;yes&#39;, &#39;t&#39;, &#39;true&#39;, &#39;1&#39;]</code> (case insensitive)</li><li>Falsy values: <code>[&#39;n&#39;, &#39;no&#39;, &#39;f&#39;, &#39;false&#39;, &#39;0&#39;]</code> (case insensitive)</li></ul><p><strong>Example</strong></p><div class="language-python"><pre><code><span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>FlagFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">filter_is_active</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># value would be True for: &#39;?is_active=y&#39;, &#39;?is_active=yes&#39;, &#39;?is_active=t&#39; etc</span>
    <span class="token comment"># value would be False for: &#39;?is_active=n&#39;, &#39;?is_active=no&#39;, &#39;?is_active=f&#39; etc</span>
    <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>is_active<span class="token operator">=</span>value<span class="token punctuation">)</span>
</code></pre></div><h2 id="datetimefilter" tabindex="-1">DateTimeFilter <a class="header-anchor" href="#datetimefilter" aria-hidden="true">#</a></h2><div class="language-python"><pre><code><span class="token decorator annotation punctuation">@filters<span class="token punctuation">.</span>DateTimeFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">filter_modified_after</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> qs<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> qs<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>modified_at__gte<span class="token operator">=</span>value<span class="token punctuation">)</span>
</code></pre></div>`,17),o=[p];function c(l,i,u,r,d,k){return s(),a("div",null,o)}var _=n(e,[["render",c]]);export{h as __pageData,_ as default};
